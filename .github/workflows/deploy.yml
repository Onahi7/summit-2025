name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      DO_HOST: ${{ secrets.DO_HOST }}
      DO_USERNAME: ${{ secrets.DO_USERNAME }}
      DO_SSH_KEY: ${{ secrets.DO_SSH_KEY }}
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
          
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install NPM Dependencies
        run: |
          npm ci --prefer-offline
          npm run build
        env:
          NODE_ENV: production
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Generate deployment package
        run: |
          mkdir -p deployment
          cp -r .env.example composer.* package*.json webpack.mix.js artisan deployment/
          cp -r app bootstrap config database lang public resources routes storage tests vendor deployment/
          cd deployment && zip -r ../deployment.zip .
          
      - name: Secure copy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "deployment.zip"
          target: "/tmp"
          
      - name: Execute deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cd /var/www/napps-conference
            unzip -q -o /tmp/deployment.zip -d ./
            composer install --no-dev --optimize-autoloader
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan storage:link
            sudo supervisorctl restart all
            sudo systemctl reload nginx
